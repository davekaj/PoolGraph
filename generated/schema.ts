// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BorrowEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("market", Value.fromString(""));
    this.set("borrower", Value.fromString(""));
    this.set("onBehalfOf", Value.fromBytes(Bytes.empty()));
    this.set("blockNumber", Value.fromI32(0));
    this.set("blockTime", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BorrowEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BorrowEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BorrowEvent", id.toString(), this);
    }
  }

  static load(id: string): BorrowEvent | null {
    return changetype<BorrowEvent | null>(store.get("BorrowEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value!.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get onBehalfOf(): Bytes {
    let value = this.get("onBehalfOf");
    return value!.toBytes();
  }

  set onBehalfOf(value: Bytes) {
    this.set("onBehalfOf", Value.fromBytes(value));
  }

  get amount(): BigDecimal | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get interestRateMode(): i32 {
    let value = this.get("interestRateMode");
    return value!.toI32();
  }

  set interestRateMode(value: i32) {
    this.set("interestRateMode", Value.fromI32(value));
  }

  get borrowRate(): BigInt | null {
    let value = this.get("borrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set borrowRate(value: BigInt | null) {
    if (!value) {
      this.unset("borrowRate");
    } else {
      this.set("borrowRate", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get blockTime(): i32 {
    let value = this.get("blockTime");
    return value!.toI32();
  }

  set blockTime(value: i32) {
    this.set("blockTime", Value.fromI32(value));
  }
}

export class RepayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("market", Value.fromString(""));
    this.set("borrower", Value.fromString(""));
    this.set("repayer", Value.fromString(""));
    this.set("blockNumber", Value.fromI32(0));
    this.set("blockTime", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RepayEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RepayEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RepayEvent", id.toString(), this);
    }
  }

  static load(id: string): RepayEvent | null {
    return changetype<RepayEvent | null>(store.get("RepayEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigDecimal | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get borrower(): string {
    let value = this.get("borrower");
    return value!.toString();
  }

  set borrower(value: string) {
    this.set("borrower", Value.fromString(value));
  }

  get repayer(): string {
    let value = this.get("repayer");
    return value!.toString();
  }

  set repayer(value: string) {
    this.set("repayer", Value.fromString(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get blockTime(): i32 {
    let value = this.get("blockTime");
    return value!.toI32();
  }

  set blockTime(value: i32) {
    this.set("blockTime", Value.fromI32(value));
  }

  get useATokens(): boolean {
    let value = this.get("useATokens");
    return value!.toBoolean();
  }

  set useATokens(value: boolean) {
    this.set("useATokens", Value.fromBoolean(value));
  }
}

export class LiquidationEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidationEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidationEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidationEvent", id.toString(), this);
    }
  }

  static load(id: string): LiquidationEvent | null {
    return changetype<LiquidationEvent | null>(
      store.get("LiquidationEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get collateralAsset(): string | null {
    let value = this.get("collateralAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collateralAsset(value: string | null) {
    if (!value) {
      this.unset("collateralAsset");
    } else {
      this.set("collateralAsset", Value.fromString(<string>value));
    }
  }

  get debtAsset(): string | null {
    let value = this.get("debtAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set debtAsset(value: string | null) {
    if (!value) {
      this.unset("debtAsset");
    } else {
      this.set("debtAsset", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get collateralAmount(): BigDecimal | null {
    let value = this.get("collateralAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set collateralAmount(value: BigDecimal | null) {
    if (!value) {
      this.unset("collateralAmount");
    } else {
      this.set("collateralAmount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(<string>value));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(<string>value));
    }
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get blockTime(): i32 {
    let value = this.get("blockTime");
    return value!.toI32();
  }

  set blockTime(value: i32) {
    this.set("blockTime", Value.fromI32(value));
  }

  get protocol(): string | null {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set protocol(value: string | null) {
    if (!value) {
      this.unset("protocol");
    } else {
      this.set("protocol", Value.fromString(<string>value));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (!value) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(<string>value));
    }
  }

  get liquidator(): string | null {
    let value = this.get("liquidator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set liquidator(value: string | null) {
    if (!value) {
      this.unset("liquidator");
    } else {
      this.set("liquidator", Value.fromString(<string>value));
    }
  }

  get received(): BigDecimal | null {
    let value = this.get("received");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set received(value: BigDecimal | null) {
    if (!value) {
      this.unset("received");
    } else {
      this.set("received", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get profit(): BigDecimal | null {
    let value = this.get("profit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set profit(value: BigDecimal | null) {
    if (!value) {
      this.unset("profit");
    } else {
      this.set("profit", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class DepositEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromI32(0));
    this.set("blockTime", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DepositEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DepositEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DepositEvent", id.toString(), this);
    }
  }

  static load(id: string): DepositEvent | null {
    return changetype<DepositEvent | null>(store.get("DepositEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(<string>value));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(<string>value));
    }
  }

  get onBehalfOf(): string | null {
    let value = this.get("onBehalfOf");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set onBehalfOf(value: string | null) {
    if (!value) {
      this.unset("onBehalfOf");
    } else {
      this.set("onBehalfOf", Value.fromString(<string>value));
    }
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get blockTime(): i32 {
    let value = this.get("blockTime");
    return value!.toI32();
  }

  set blockTime(value: i32) {
    this.set("blockTime", Value.fromI32(value));
  }

  get protocol(): string | null {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set protocol(value: string | null) {
    if (!value) {
      this.unset("protocol");
    } else {
      this.set("protocol", Value.fromString(<string>value));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (!value) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(<string>value));
    }
  }

  get referralCode(): i32 {
    let value = this.get("referralCode");
    return value!.toI32();
  }

  set referralCode(value: i32) {
    this.set("referralCode", Value.fromI32(value));
  }
}

export class WithdrawEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("blockNumber", Value.fromI32(0));
    this.set("blockTime", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WithdrawEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawEvent", id.toString(), this);
    }
  }

  static load(id: string): WithdrawEvent | null {
    return changetype<WithdrawEvent | null>(store.get("WithdrawEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get asset(): string | null {
    let value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set asset(value: string | null) {
    if (!value) {
      this.unset("asset");
    } else {
      this.set("asset", Value.fromString(<string>value));
    }
  }

  get amount(): BigDecimal | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get amountUSD(): BigDecimal | null {
    let value = this.get("amountUSD");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amountUSD(value: BigDecimal | null) {
    if (!value) {
      this.unset("amountUSD");
    } else {
      this.set("amountUSD", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get to(): string | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set to(value: string | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromString(<string>value));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(<string>value));
    }
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value!.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get blockTime(): i32 {
    let value = this.get("blockTime");
    return value!.toI32();
  }

  set blockTime(value: i32) {
    this.set("blockTime", Value.fromI32(value));
  }

  get protocol(): string | null {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set protocol(value: string | null) {
    if (!value) {
      this.unset("protocol");
    } else {
      this.set("protocol", Value.fromString(<string>value));
    }
  }

  get market(): string | null {
    let value = this.get("market");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set market(value: string | null) {
    if (!value) {
      this.unset("market");
    } else {
      this.set("market", Value.fromString(<string>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hasBorrowed(): boolean {
    let value = this.get("hasBorrowed");
    return value!.toBoolean();
  }

  set hasBorrowed(value: boolean) {
    this.set("hasBorrowed", Value.fromBoolean(value));
  }
}

export class AccountAToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("market", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("accrualBlockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("enteredMarket", Value.fromBoolean(false));
    this.set("aTokenBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalUnderlyingSupplied",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set(
      "totalUnderlyingRedeemed",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("accountBorrowIndex", Value.fromBigDecimal(BigDecimal.zero()));
    this.set(
      "totalUnderlyingBorrowed",
      Value.fromBigDecimal(BigDecimal.zero())
    );
    this.set("totalUnderlyingRepaid", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("storedBorrowBalance", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountAToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountAToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountAToken", id.toString(), this);
    }
  }

  static load(id: string): AccountAToken | null {
    return changetype<AccountAToken | null>(store.get("AccountAToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get accrualBlockNumber(): BigInt {
    let value = this.get("accrualBlockNumber");
    return value!.toBigInt();
  }

  set accrualBlockNumber(value: BigInt) {
    this.set("accrualBlockNumber", Value.fromBigInt(value));
  }

  get enteredMarket(): boolean {
    let value = this.get("enteredMarket");
    return value!.toBoolean();
  }

  set enteredMarket(value: boolean) {
    this.set("enteredMarket", Value.fromBoolean(value));
  }

  get aTokenBalance(): BigDecimal {
    let value = this.get("aTokenBalance");
    return value!.toBigDecimal();
  }

  set aTokenBalance(value: BigDecimal) {
    this.set("aTokenBalance", Value.fromBigDecimal(value));
  }

  get totalUnderlyingSupplied(): BigDecimal {
    let value = this.get("totalUnderlyingSupplied");
    return value!.toBigDecimal();
  }

  set totalUnderlyingSupplied(value: BigDecimal) {
    this.set("totalUnderlyingSupplied", Value.fromBigDecimal(value));
  }

  get totalUnderlyingRedeemed(): BigDecimal {
    let value = this.get("totalUnderlyingRedeemed");
    return value!.toBigDecimal();
  }

  set totalUnderlyingRedeemed(value: BigDecimal) {
    this.set("totalUnderlyingRedeemed", Value.fromBigDecimal(value));
  }

  get accountBorrowIndex(): BigDecimal {
    let value = this.get("accountBorrowIndex");
    return value!.toBigDecimal();
  }

  set accountBorrowIndex(value: BigDecimal) {
    this.set("accountBorrowIndex", Value.fromBigDecimal(value));
  }

  get totalUnderlyingBorrowed(): BigDecimal {
    let value = this.get("totalUnderlyingBorrowed");
    return value!.toBigDecimal();
  }

  set totalUnderlyingBorrowed(value: BigDecimal) {
    this.set("totalUnderlyingBorrowed", Value.fromBigDecimal(value));
  }

  get totalUnderlyingRepaid(): BigDecimal {
    let value = this.get("totalUnderlyingRepaid");
    return value!.toBigDecimal();
  }

  set totalUnderlyingRepaid(value: BigDecimal) {
    this.set("totalUnderlyingRepaid", Value.fromBigDecimal(value));
  }

  get storedBorrowBalance(): BigDecimal {
    let value = this.get("storedBorrowBalance");
    return value!.toBigDecimal();
  }

  set storedBorrowBalance(value: BigDecimal) {
    this.set("storedBorrowBalance", Value.fromBigDecimal(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class AccountATokenTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("account", Value.fromString(""));
    this.set("tx_hash", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("logIndex", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AccountATokenTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountATokenTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountATokenTransaction", id.toString(), this);
    }
  }

  static load(id: string): AccountATokenTransaction | null {
    return changetype<AccountATokenTransaction | null>(
      store.get("AccountATokenTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    return value!.toBigInt();
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("liquidityRate", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Market entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Market", id.toString(), this);
    }
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get("Market", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get protocol(): string | null {
    let value = this.get("protocol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set protocol(value: string | null) {
    if (!value) {
      this.unset("protocol");
    } else {
      this.set("protocol", Value.fromString(<string>value));
    }
  }

  get depositAsset(): string | null {
    let value = this.get("depositAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set depositAsset(value: string | null) {
    if (!value) {
      this.unset("depositAsset");
    } else {
      this.set("depositAsset", Value.fromString(<string>value));
    }
  }

  get borrowAsset(): string | null {
    let value = this.get("borrowAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set borrowAsset(value: string | null) {
    if (!value) {
      this.unset("borrowAsset");
    } else {
      this.set("borrowAsset", Value.fromString(<string>value));
    }
  }

  get aTokenAddress(): Bytes | null {
    let value = this.get("aTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set aTokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("aTokenAddress");
    } else {
      this.set("aTokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get stableDebtTokenAddress(): Bytes | null {
    let value = this.get("stableDebtTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set stableDebtTokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("stableDebtTokenAddress");
    } else {
      this.set("stableDebtTokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get variableDebtTokenAddress(): Bytes | null {
    let value = this.get("variableDebtTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set variableDebtTokenAddress(value: Bytes | null) {
    if (!value) {
      this.unset("variableDebtTokenAddress");
    } else {
      this.set("variableDebtTokenAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get interestRateStrategyAddress(): Bytes | null {
    let value = this.get("interestRateStrategyAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set interestRateStrategyAddress(value: Bytes | null) {
    if (!value) {
      this.unset("interestRateStrategyAddress");
    } else {
      this.set("interestRateStrategyAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get accruedToTreasury(): BigDecimal | null {
    let value = this.get("accruedToTreasury");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set accruedToTreasury(value: BigDecimal | null) {
    if (!value) {
      this.unset("accruedToTreasury");
    } else {
      this.set("accruedToTreasury", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get liquidityIndex(): BigDecimal | null {
    let value = this.get("liquidityIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidityIndex(value: BigDecimal | null) {
    if (!value) {
      this.unset("liquidityIndex");
    } else {
      this.set("liquidityIndex", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get currentLiquidityRate(): BigDecimal | null {
    let value = this.get("currentLiquidityRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set currentLiquidityRate(value: BigDecimal | null) {
    if (!value) {
      this.unset("currentLiquidityRate");
    } else {
      this.set("currentLiquidityRate", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get variableBorrowIndex(): BigDecimal | null {
    let value = this.get("variableBorrowIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set variableBorrowIndex(value: BigDecimal | null) {
    if (!value) {
      this.unset("variableBorrowIndex");
    } else {
      this.set("variableBorrowIndex", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get currentVariableBorrowRate(): BigDecimal | null {
    let value = this.get("currentVariableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set currentVariableBorrowRate(value: BigDecimal | null) {
    if (!value) {
      this.unset("currentVariableBorrowRate");
    } else {
      this.set(
        "currentVariableBorrowRate",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get currentStableBorrowRate(): BigDecimal | null {
    let value = this.get("currentStableBorrowRate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set currentStableBorrowRate(value: BigDecimal | null) {
    if (!value) {
      this.unset("currentStableBorrowRate");
    } else {
      this.set(
        "currentStableBorrowRate",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value!.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get unbacked(): BigDecimal | null {
    let value = this.get("unbacked");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set unbacked(value: BigDecimal | null) {
    if (!value) {
      this.unset("unbacked");
    } else {
      this.set("unbacked", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get isolationModeTotalDebt(): BigDecimal | null {
    let value = this.get("isolationModeTotalDebt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set isolationModeTotalDebt(value: BigDecimal | null) {
    if (!value) {
      this.unset("isolationModeTotalDebt");
    } else {
      this.set(
        "isolationModeTotalDebt",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    return value!.toBigInt();
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("network", Value.fromString(""));
    this.set("type", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get network(): string {
    let value = this.get("network");
    return value!.toString();
  }

  set network(value: string) {
    this.set("network", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get riskType(): string | null {
    let value = this.get("riskType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set riskType(value: string | null) {
    if (!value) {
      this.unset("riskType");
    } else {
      this.set("riskType", Value.fromString(<string>value));
    }
  }
}

export class Asset extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("symbol", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("decimals", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Asset entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Asset must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Asset", id.toString(), this);
    }
  }

  static load(id: string): Asset | null {
    return changetype<Asset | null>(store.get("Asset", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}
